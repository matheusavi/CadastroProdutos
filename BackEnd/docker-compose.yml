version: '3.4'

networks:
    dockerapi-dev:
        driver: bridge
    mongo-compose-network:
      driver: bridge

services:
  cadastroproduto.api.principal:
    image: ${DOCKER_REGISTRY-}cadastroprodutoapiprincipal
    depends_on:
        - "postgres_image"
        - "rabbitmq"
    build:
      context: .
      dockerfile: CadastroProduto.Api.Principal/Dockerfile
    ports:
        - '5001:443'
    environment:
        ASPNETCORE_HTTPS_PORT: 'https://+:5001'
        

  cadastroprodutos.api:
    image: ${DOCKER_REGISTRY-}cadastroprodutosapi
    build:
      context: .
      dockerfile: CadastroProdutos.Api/Dockerfile

  postgres_image:
    image: postgres:latest
    ports:
        - "5432"
    restart: always
    volumes:
        - db_volume:/var/lib/postgresql/data
    environment:
        POSTGRES_USER: "cadastroproduto"
        POSTGRES_PASSWORD: "cadastroproduto123"
        POSTGRES_DB: "cadastroproduto"

  rabbitmq:
    image: 'masstransit/rabbitmq'
    ports:
      - '4369:4369'
      - '5672:5672'
      - '25672:25672'
      - '15672:15672'
    volumes:
      - 'rabbitmq_data:/bitnami'

  mongodb:
    image: 'docker.io/bitnami/mongodb:4.2-debian-10'
    ports:
      - "27017:27017"
    volumes:
      - 'mongodb_data:/bitnami/mongodb'

  cadastroproduto.worker:
    image: ${DOCKER_REGISTRY-}cadastroprodutoworker
    build:
      context: .
      dockerfile: CadastroProduto.Worker/Dockerfile

  #frontend:
  #  container_name: frontend
  #  restart: always
  #  build:
  #    context: ../FrontEnd
  #    dockerfile: Dockerfile
  #  expose:
  #    - "80"
  #  ports:
  #    - "8080:8080"

volumes:
  db_volume:
  rabbitmq_data:
    driver: local
  mongodb_data:
    driver: local
